- name: Create required directories on nodes
  hosts: nomad_instances
  tasks:
    - become: true
      command:
        cmd: "mkdir -p /etc/nomad.d /export/nomad-data"
- name: Place server certificates to all nodes
  hosts: nomad_instances
  tasks:
    - name: Copy certificates to nodes
      copy:
        src: ./files/cert/nomad/nomad-ca.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/server.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/server-key.pem
        dest: "/etc/nomad.d/"
- name: Place Certificates to client nodes
  hosts: nomad_clients
  tasks:
    - name: Copy certificates to nodes
      copy:
        src: ./files/cert/nomad/nomad-ca.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/client.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/client-key.pem
        dest: "/etc/nomad.d/"
- name: Place Certificates to all nodes for CLI
  hosts: nomad_instances
  tasks:
    - name: Copy certificates to nodes
      copy:
        src: ./files/cert/nomad/nomad-ca.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/cli.pem
        dest: "/etc/nomad.d/"
    - copy:
        src: ./files/cert/nomad/cli-key.pem
        dest: "/etc/nomad.d/"
- name: Install Docker on Nomad client nodes
  hosts: nomad_clients
  become: true
  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker
- name: Install help tools for nodes
  hosts: nomad_clients
  become: true
  tasks:
    - name: Install CLI json processor
      apt: name=jq state=latest
- name: Setup Consul cluster
  hosts: consul_instances
  become_user: root
  become_method: sudo
  roles:
    - { role: ansible-consul }
  vars:
    consul_ui: true
    consul_debug: true
    consul_client_address: 0.0.0.0
    consul_tls_verify_incoming: true
    consul_tls_verify_incoming_https: true
    consul_tls_verify_server_hostname: true
    consul_connect_enabled: true
    consul_acl_default_policy: deny
    consul_ports_grpc: 8502
- name: Setup Consul ACL policies for Nomad
  hosts: consul_manage_instance
  become_user: root
  become_method: sudo
  tasks:
    - name: Check if Nomad Server ACL Token exists
      shell: consul acl token list -token {{ consul_bootstrap_token }} | grep 'Nomad Server Agent'
      register: server_token_exists
      ignore_errors: true
      
    - name: Check if Nomad Client ACL Token exists
      shell: consul acl token list -token {{ consul_bootstrap_token }} | grep 'Nomad Client Agent'
      register: client_token_exists
      ignore_errors: true

    - name: Check if Nomad Server ACL policy already registered
      shell: consul acl policy list -token {{ consul_bootstrap_token }} | grep 'Nomad Server Policy'
      register: server_policy_exists
      ignore_errors: true
      
    - name: Check if Nomad Client ACL policy already registered
      shell: consul acl policy list -token {{ consul_bootstrap_token }} | grep 'Nomad Client Policy'
      register: client_policy_exists
      ignore_errors: true

    - name: Store and create Nomad Server ACL policy
      copy:
        src: ./files/policies/nomad-server-policy.hcl
        dest: /var/
        backup: true
      when: server_policy_exists.stdout == ""
    - command: consul acl policy create -name "nomad-server" -description "Nomad Server Policy" -rules @/var/nomad-server-policy.hcl -token {{ consul_bootstrap_token }}
      when: server_policy_exists.stdout == ""

    - name: Store and create Nomad Client ACL policy
      copy:
        src: ./files/policies/nomad-client-policy.hcl
        dest: /var/
        backup: true
      when: client_policy_exists.stdout == ""
    - command: consul acl policy create -name "nomad-client" -description "Nomad Client Policy" -rules @/var/nomad-client-policy.hcl -token {{ consul_bootstrap_token }}
      when: client_policy_exists.stdout == ""

    - name: Generate Nomad Server ACL token
      command: consul acl token create -policy-name "nomad-server" -description "Nomad Server Agent" -token {{ consul_bootstrap_token }}
      when: server_token_exists.stdout == ""
    - name: Generate Nomad Client ACL token
      command: consul acl token create -policy-name "nomad-client" -description "Nomad Client Agent" -token {{ consul_bootstrap_token }}
      when: client_token_exists.stdout == ""

    - name: Get Nomad Server ACL token ID
      shell: consul acl token list -token {{ consul_bootstrap_token }} | grep "Nomad Server Agent" -B 2 | grep "AccessorID:" | sed -e 's/^AccessorID:\s*//g'
      register: server_token_id
    - name: Store and Fetch Nomad Server ACL secret
      shell: consul acl token read -id {{ server_token_id.stdout }} -token {{ consul_bootstrap_token }} | grep "SecretID:" | sed -e 's/^SecretID:\s*//g' | tee /var/nomad-server-agent.token
    - fetch:
        src: /var/nomad-server-agent.token
        dest: ./files/tokens/consul/nomad/
        flat: true

    - name: Get Nomad Client ACL token ID
      shell: consul acl token list -token {{ consul_bootstrap_token }} | grep "Nomad Client Agent" -B 2 | grep "AccessorID:" | sed -e 's/^AccessorID:\s*//g'
      register: client_token_id
    - name: Store and Fetch Nomad Client ACL secret
      shell: consul acl token read -id {{ client_token_id.stdout }} -token {{ consul_bootstrap_token }} | grep "SecretID:" | sed -e 's/^SecretID:\s*//g' | tee /var/nomad-client-agent.token
    - fetch:
        src: /var/nomad-client-agent.token
        dest: ./files/tokens/consul/nomad/
        flat: true
  vars:
    consul_bootstrap_token: "{{ lookup('file', './files/tokens/consul/nomad/bootstrap.token') | default('', true) }}"
- name: Setup Vault
  hosts: vault_instances
  become_user: root
  become_method: sudo
  roles:
    - { role: ansible-community.ansible-vault }
  vars:
    vault_version: 1.7.3
    vault_cluster_name: "{{ lookup('env', 'VAULT_CLUSTER_NAME') | default('dc1', true) }}"
    vault_datacenter: "{{ lookup('env', 'VAULT_DATACENTER') | default('dc1', true) }}"
    vault_enable_log: true
    vault_tls_disable: true
    vault_service_registration_consul_enable: false
    vault_bin_path: /usr/
- name: Install CNI plugin
  hosts: nomad_instances
  become_user: root
  become_method: sudo
  tasks:
    - name: Crate directory for CNI plugin
      become: true
      command: mkdir -p /opt/cni/bin
    - name: Download CNI plugin
      command: curl -L -o cni-plugins.tgz https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgz
    - name: Unpack CNI plugin to created directory
      become: true
      command: tar -C /opt/cni/bin -xzf cni-plugins.tgz
- name: Setup Nomad cluster
  hosts: nomad_instances
  become_user: root
  become_method: sudo
  serial:
    - 1
    - 2
    - 10
  roles:
    - { role: install-nomad }
  vars:
    nomad_debug: true
    nomad_version: 1.1.2
    nomad_datacenter: "fra1"
    nomad_use_consul: true
    nomad_group_name: nomad_instances
    nomad_rejoin_after_leave: true
    nomad_docker_enable: true
    nomad_podman_enable: false
    nomad_podman_version: 0.3.0
    nomad_consul_tokens_dir: "{{ lookup('env', 'NOMAD_CONSUL_TOKENS_DIR') | default(false, true) }}"
    nomad_consul_token: "{{ lookup('file', nomad_consul_tokens_dir + '/nomad-' + nomad_node_role + '-agent.token') }}"
